{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\react\\\\test\\\\test\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect } from \"react\";\nimport { TaskData } from \"./components/Context\";\nimport CreateTask from \"./components/CreateTask\";\nimport Header from \"./components/Header\";\nimport Note from \"./components/Note\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const {\n    task,\n    setTask,\n    isLoading,\n    setIsLoading,\n    fetchTaskHandler\n  } = useContext(TaskData); //delete the task handler\n\n  const deleteHandler = id => {\n    setTask(preVal => {\n      return [...preVal.filter((val, idx) => idx !== id)];\n    });\n  };\n\n  useEffect(() => {\n    fetchTaskHandler();\n  }, []);\n  console.log(task);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }, this), !isLoading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CreateTask, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"taskList\",\n        children: task.map((val, idx) => {\n          return /*#__PURE__*/_jsxDEV(Note, {\n            id: idx,\n            title: val.title,\n            content: val.content,\n            onDelete: deleteHandler\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s(App, \"vmXHInXX6zMS1WYkFVGVzUz102U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/project/react/test/test/src/App.js"],"names":["useContext","useEffect","TaskData","CreateTask","Header","Note","App","task","setTask","isLoading","setIsLoading","fetchTaskHandler","deleteHandler","id","preVal","filter","val","idx","console","log","map","title","content"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,SAAjB;AAA4BC,IAAAA,YAA5B;AAAyCC,IAAAA;AAAzC,MAA8DX,UAAU,CAACE,QAAD,CAA9E,CADa,CAGb;;AACA,QAAMU,aAAa,GAAIC,EAAD,IAAQ;AAC5BL,IAAAA,OAAO,CAAEM,MAAD,IAAY;AAClB,aAAO,CAAC,GAAGA,MAAM,CAACC,MAAP,CAAc,CAACC,GAAD,EAAMC,GAAN,KAAcA,GAAG,KAAKJ,EAApC,CAAJ,CAAP;AACD,KAFM,CAAP;AAGD,GAJD;;AAMAZ,EAAAA,SAAS,CAAC,MAAI;AACZU,IAAAA,gBAAgB;AACjB,GAFQ,EAEP,EAFO,CAAT;AAKAO,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFhB,EAGG,CAACA,SAAD,iBACC;AAAA,8BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,kBAEIF,IAAI,CAACa,GAAL,CAAS,CAACJ,GAAD,EAAMC,GAAN,KAAc;AACrB,8BACE,QAAC,IAAD;AAEE,YAAA,EAAE,EAAEA,GAFN;AAGE,YAAA,KAAK,EAAED,GAAG,CAACK,KAHb;AAIE,YAAA,OAAO,EAAEL,GAAG,CAACM,OAJf;AAKE,YAAA,QAAQ,EAAEV;AALZ,aACOK,GADP;AAAA;AAAA;AAAA;AAAA,kBADF;AASD,SAVD;AAFJ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBAJJ;AAAA,kBADF;AA2BD;;GA3CQX,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport { TaskData } from \"./components/Context\";\nimport CreateTask from \"./components/CreateTask\";\nimport Header from \"./components/Header\";\nimport Note from \"./components/Note\";\n\nfunction App() {\n  const { task, setTask, isLoading, setIsLoading,fetchTaskHandler } = useContext(TaskData);\n\n  //delete the task handler\n  const deleteHandler = (id) => {\n    setTask((preVal) => {\n      return [...preVal.filter((val, idx) => idx !== id)]\n    })\n  }\n\n  useEffect(()=>{\n    fetchTaskHandler();\n  },[])\n\n\n  console.log(task);\n  return (\n    <>\n      <Header />\n      {isLoading && <p>no data</p>}\n      {!isLoading && (\n        <>\n          <CreateTask />\n          <div className=\"taskList\">\n            {\n              task.map((val, idx) => {\n                return (\n                  <Note\n                    key={idx}\n                    id={idx}\n                    title={val.title}\n                    content={val.content}\n                    onDelete={deleteHandler}\n                  />\n                )\n              })\n            }\n          </div>\n        </>\n      )}\n\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}