{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\react\\\\test\\\\test\\\\src\\\\components\\\\Context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useCallback, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskData = /*#__PURE__*/createContext();\nexport const Context = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [task, setTask] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  return /*#__PURE__*/_jsxDEV(TaskData.Provider, {\n    value: {\n      task,\n      setTask,\n      isLoading,\n      setIsLoading,\n      fetchTaskHandler\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Context, \"QSmONXQocE3c+TAMGIQTav0+DXU=\");\n\n_c = Context;\nexport default Context;\n\nvar _c;\n\n$RefreshReg$(_c, \"Context\");","map":{"version":3,"sources":["E:/project/react/test/test/src/components/Context.jsx"],"names":["React","createContext","useCallback","useEffect","useState","TaskData","Context","children","task","setTask","isLoading","setIsLoading","fetchTaskHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,SAA5C,EAAuDC,QAAvD,QAAuE,OAAvE;;AAEA,OAAO,MAAMC,QAAQ,gBAAGJ,aAAa,EAA9B;AAEP,OAAO,MAAMK,OAAO,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAWC,YAAX,IAAyBP,QAAQ,CAAC,KAAD,CAAvC;AAKA,sBACI,QAAC,QAAD,CAAU,QAAV;AAAmB,IAAA,KAAK,EAAE;AAACI,MAAAA,IAAD;AAAOC,MAAAA,OAAP;AAAeC,MAAAA,SAAf;AAAyBC,MAAAA,YAAzB;AAAsCC,MAAAA;AAAtC,KAA1B;AAAA,cACKL;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAZM;;GAAMD,O;;KAAAA,O;AAcb,eAAeA,OAAf","sourcesContent":["import React, { createContext, useCallback, useEffect, useState } from 'react'\r\n\r\nexport const TaskData = createContext();\r\n\r\nexport const Context = ({children}) => {\r\n    const [task, setTask] = useState([]);\r\n    const [isLoading,setIsLoading]=useState(false);\r\n\r\n  \r\n\r\n\r\n    return (\r\n        <TaskData.Provider value={{task, setTask,isLoading,setIsLoading,fetchTaskHandler}}>\r\n            {children}\r\n        </TaskData.Provider>\r\n    )\r\n}\r\n\r\nexport default Context"]},"metadata":{},"sourceType":"module"}